# Generated by Django 3.2.8 on 2021-10-10 17:26

import colorfield.fields
import django.db.models.deletion
from django.db import migrations, models

import wx.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AdministrativeRegionType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=45)),
            ],
            options={
                'verbose_name': 'administrative region type',
                'verbose_name_plural': 'administrative region types',
            },
        ),
        migrations.CreateModel(
            name='CodeTable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=45, unique=True)),
                ('description', models.CharField(max_length=256)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('code', models.CharField(max_length=2)),
                ('name', models.CharField(max_length=256, unique=True)),
            ],
            options={
                'verbose_name_plural': 'countries',
            },
        ),
        migrations.CreateModel(
            name='DataFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ready_at', models.DateTimeField(blank=True, null=True)),
                ('ready', models.BooleanField(default=False)),
                ('initial_date', models.DateTimeField(blank=True, null=True)),
                ('final_date', models.DateTimeField(blank=True, null=True)),
                ('source', models.CharField(default='Raw data', max_length=30)),
                ('lines', models.IntegerField(blank=True, default=None, null=True)),
                ('prepared_by', models.CharField(blank=True, max_length=256, null=True)),
                ('interval_in_seconds', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataSource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('symbol', models.CharField(max_length=8, unique=True)),
                ('name', models.CharField(max_length=32, unique=True)),
                ('base_url', models.URLField(null=True)),
                ('location', models.CharField(max_length=256, null=True)),
            ],
            options={
                'verbose_name': 'data source',
                'verbose_name_plural': 'data sources',
            },
        ),
        migrations.CreateModel(
            name='Decoder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=40)),
                ('description', models.CharField(max_length=256)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_field', models.IntegerField()),
                ('district', models.CharField(max_length=64)),
                ('acres', models.FloatField()),
                ('hectares', models.FloatField()),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
        ),
        migrations.CreateModel(
            name='Flash',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(choices=[('CG', 'CG'), ('IC', 'IC')], max_length=60)),
                ('datetime', models.DateTimeField()),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('peak_current', models.IntegerField()),
                ('ic_height', models.IntegerField()),
                ('num_sensors', models.IntegerField()),
                ('ic_multiplicity', models.IntegerField()),
                ('cg_multiplicity', models.IntegerField()),
                ('start_datetime', models.DateTimeField()),
                ('duration', models.IntegerField()),
                ('ul_latitude', models.FloatField()),
                ('ul_longitude', models.FloatField()),
                ('lr_latitude', models.FloatField()),
                ('lr_longitude', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Format',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=40, unique=True)),
                ('description', models.CharField(max_length=256)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='FTPServer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=64, unique=True)),
                ('host', models.CharField(max_length=256)),
                ('port', models.IntegerField()),
                ('username', models.CharField(max_length=128)),
                ('password', models.CharField(max_length=128)),
                ('is_active_mode', models.BooleanField()),
            ],
            options={
                'unique_together': {('host', 'port', 'username', 'password')},
            },
        ),
        migrations.CreateModel(
            name='HydroMLPrediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=256)),
                ('hydroml_prediction_id', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Interval',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('symbol', models.CharField(max_length=8)),
                ('description', models.CharField(max_length=40)),
                ('default_query_range', models.IntegerField(default=0)),
                ('seconds', models.IntegerField(null=True)),
            ],
            options={
                'ordering': ('symbol',),
            },
        ),
        migrations.CreateModel(
            name='MeasurementVariable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=40, unique=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Neighborhood',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=256, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NoaaDcp',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('dcp_address', models.CharField(max_length=256)),
                ('first_channel', models.IntegerField(blank=True, null=True)),
                ('second_channel', models.IntegerField(blank=True, null=True)),
                ('first_transmission_time', models.TimeField()),
                ('transmission_window', models.TimeField()),
                ('transmission_period', models.TimeField()),
                ('last_datetime', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NoaaTransmissionRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rate', models.IntegerField(unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='NoaaTransmissionType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('acronym', models.CharField(max_length=5, unique=True)),
                ('description', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='PeriodicJobType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=40, unique=True)),
                ('description', models.CharField(max_length=256)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PhysicalQuantity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=16, unique=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='QualityFlag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('symbol', models.CharField(max_length=8, unique=True)),
                ('name', models.CharField(max_length=256, unique=True)),
                ('color', colorfield.fields.ColorField(blank=True, default='#FF0000', max_length=18, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RatingCurve',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('start_date', models.DateTimeField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SamplingOperation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('symbol', models.CharField(max_length=5, unique=True)),
                ('name', models.CharField(max_length=40, unique=True)),
            ],
            options={
                'ordering': ('symbol',),
            },
        ),
        migrations.CreateModel(
            name='Station',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=256)),
                ('alias_name', models.CharField(blank=True, max_length=256, null=True)),
                ('begin_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('longitude', models.FloatField(validators=[django.core.validators.MinValueValidator(-180.0),
                                                            django.core.validators.MaxValueValidator(180.0)])),
                ('latitude', models.FloatField(validators=[django.core.validators.MinValueValidator(-90.0),
                                                           django.core.validators.MaxValueValidator(90.0)])),
                ('elevation', models.FloatField(blank=True, null=True)),
                ('code', models.CharField(max_length=64)),
                ('wmo', models.IntegerField(blank=True, null=True)),
                ('wigos', models.CharField(blank=True, max_length=64, null=True)),
                ('is_active', models.BooleanField(default=False)),
                ('is_automatic', models.BooleanField(default=True)),
                ('organization', models.CharField(blank=True, max_length=256, null=True)),
                ('observer', models.CharField(blank=True, max_length=256, null=True)),
                ('watershed', models.CharField(blank=True, max_length=256, null=True)),
                ('z', models.FloatField(blank=True, null=True)),
                ('datum', models.CharField(blank=True, max_length=256, null=True)),
                ('zone', models.CharField(blank=True, max_length=256, null=True)),
                ('ground_water_province', models.CharField(blank=True, max_length=256, null=True)),
                ('river_code', models.IntegerField(blank=True, null=True)),
                ('river_course', models.CharField(blank=True, max_length=64, null=True)),
                ('catchment_area_station', models.CharField(blank=True, max_length=256, null=True)),
                ('river_origin', models.CharField(blank=True, max_length=256, null=True)),
                ('easting', models.FloatField(blank=True, null=True)),
                ('northing', models.FloatField(blank=True, null=True)),
                ('river_outlet', models.CharField(blank=True, max_length=256, null=True)),
                ('river_length', models.IntegerField(blank=True, null=True)),
                ('local_land_use', models.CharField(blank=True, max_length=256, null=True)),
                ('soil_type', models.CharField(blank=True, max_length=64, null=True)),
                ('site_description', models.CharField(blank=True, max_length=256, null=True)),
                ('land_surface_elevation', models.FloatField(blank=True, null=True)),
                ('screen_length', models.FloatField(blank=True, null=True)),
                ('top_casing_land_surface', models.FloatField(blank=True, null=True)),
                ('depth_midpoint', models.FloatField(blank=True, null=True)),
                ('screen_size', models.FloatField(blank=True, null=True)),
                ('casing_type', models.CharField(blank=True, max_length=256, null=True)),
                ('casing_diameter', models.FloatField(blank=True, null=True)),
                ('existing_gauges', models.CharField(blank=True, max_length=256, null=True)),
                ('flow_direction_at_station', models.CharField(blank=True, max_length=256, null=True)),
                ('flow_direction_above_station', models.CharField(blank=True, max_length=256, null=True)),
                ('flow_direction_below_station', models.CharField(blank=True, max_length=256, null=True)),
                ('bank_full_stage', models.CharField(blank=True, max_length=256, null=True)),
                ('bridge_level', models.CharField(blank=True, max_length=256, null=True)),
                ('access_point', models.CharField(blank=True, max_length=256, null=True)),
                ('temporary_benchmark', models.CharField(blank=True, max_length=256, null=True)),
                ('mean_sea_level', models.CharField(blank=True, max_length=256, null=True)),
                ('data_type', models.CharField(blank=True, max_length=256, null=True)),
                ('frequency_observation', models.CharField(blank=True, max_length=256, null=True)),
                ('historic_events', models.CharField(blank=True, max_length=256, null=True)),
                ('other_information', models.CharField(blank=True, max_length=256, null=True)),
                ('hydrology_station_type', models.CharField(blank=True, max_length=64, null=True)),
                ('is_surface', models.BooleanField(default=True)),
                ('station_details', models.CharField(blank=True, max_length=256, null=True)),
                ('country', models.CharField(blank=True, max_length=256, null=True)),
                ('region', models.CharField(blank=True, max_length=256, null=True)),
                ('utc_offset_minutes', models.IntegerField(validators=[django.core.validators.MaxValueValidator(720),
                                                                       django.core.validators.MinValueValidator(
                                                                           -720)])),
                ('alternative_names', models.CharField(blank=True, max_length=256, null=True)),
                ('wmo_station_plataform', models.CharField(blank=True, max_length=256, null=True)),
                ('operation_status', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='StationCommunication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=45)),
                ('description', models.CharField(max_length=256)),
                ('color', models.CharField(max_length=7)),
            ],
            options={
                'verbose_name': 'station communication',
                'verbose_name_plural': 'station communications',
            },
        ),
        migrations.CreateModel(
            name='StationDataFileStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=128)),
            ],
            options={
                'verbose_name': 'station data file status',
                'verbose_name_plural': 'station data file statuses',
            },
        ),
        migrations.CreateModel(
            name='StationProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=45)),
                ('description', models.CharField(max_length=256)),
                ('color', models.CharField(max_length=7)),
                ('is_automatic', models.BooleanField(default=False)),
                ('is_manual', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'station profile',
                'verbose_name_plural': 'station profiles',
            },
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('symbol', models.CharField(max_length=16, unique=True)),
                ('name', models.CharField(max_length=256, unique=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Variable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('variable_type', models.CharField(max_length=40)),
                ('symbol', models.CharField(max_length=8)),
                ('name', models.CharField(max_length=40)),
                ('precision', models.IntegerField(blank=True, null=True)),
                ('scale', models.IntegerField(blank=True, null=True)),
                ('color', colorfield.fields.ColorField(blank=True, default='#FF0000', max_length=18, null=True)),
                ('range_min', models.IntegerField(blank=True, null=True)),
                ('range_max', models.IntegerField(blank=True, null=True)),
                ('default_representation', models.CharField(blank=True, choices=[('line', 'Line'), ('point', 'Point'),
                                                                                 ('bar', 'Bar'), ('column', 'Column')],
                                                            default='line', max_length=60, null=True)),
                ('code_table', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                                 to='wx.codetable')),
                ('measurement_variable',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                   to='wx.measurementvariable')),
                ('sampling_operation',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                   to='wx.samplingoperation')),
                ('unit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                           to='wx.unit')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Watershed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('watershed', models.CharField(max_length=128)),
                ('size', models.CharField(max_length=16)),
                ('acres', models.FloatField()),
                ('hectares', models.FloatField()),
                ('shape_leng', models.FloatField()),
                ('shape_area', models.FloatField()),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
        ),
        migrations.CreateModel(
            name='WMOProgram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=256, unique=True)),
                ('description', models.CharField(blank=True, max_length=256, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WMORegion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=256, unique=True)),
                ('description', models.CharField(blank=True, max_length=256, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WMOStationType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=256, unique=True)),
                ('description', models.CharField(blank=True, max_length=256, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WxPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=256, unique=True)),
                ('url_name', models.CharField(max_length=256)),
                ('permission', models.CharField(
                    choices=[('read', 'Read'), ('write', 'Write'), ('update', 'Update'), ('delete', 'Delete')],
                    max_length=32)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WxGroupPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('group', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='auth.group')),
                ('permissions', models.ManyToManyField(to='wx.WxPermission')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VariableFormat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lookup_key', models.CharField(max_length=255)),
                ('format', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx.format')),
                ('interval', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx.interval')),
                ('variable', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx.variable')),
            ],
            options={
                'ordering': ['variable', 'format'],
            },
        ),
        migrations.CreateModel(
            name='StationType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=45)),
                ('description', models.CharField(max_length=256)),
                ('parent_type',
                 models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='wx.stationtype')),
            ],
            options={
                'verbose_name': 'station type',
                'verbose_name_plural': 'station types',
            },
        ),
        migrations.CreateModel(
            name='StationImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=256)),
                ('path', models.FileField(upload_to='station_images/%Y/%m/%d/')),
                ('description', models.CharField(blank=True, max_length=256, null=True)),
                ('station',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='station_images',
                                   to='wx.station')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StationFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=256, null=True)),
                ('file', models.FileField(upload_to='station_files/%Y/%m/%d/')),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wx.station')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StationDataFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('utc_offset_minutes', models.IntegerField()),
                ('filepath', models.CharField(max_length=1024)),
                ('file_hash', models.CharField(db_index=True, max_length=128)),
                ('file_size', models.IntegerField()),
                ('observation', models.TextField(blank=True, max_length=1024, null=True)),
                ('is_historical_data', models.BooleanField(default=False)),
                ('override_data_on_conflict', models.BooleanField(default=False)),
                ('decoder', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx.decoder')),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx.station')),
                ('status',
                 models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx.stationdatafilestatus')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='station',
            name='communication_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                    to='wx.stationcommunication'),
        ),
        migrations.AddField(
            model_name='station',
            name='data_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                    to='wx.datasource'),
        ),
        migrations.AddField(
            model_name='station',
            name='profile',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                    to='wx.stationprofile'),
        ),
        migrations.AddField(
            model_name='station',
            name='wmo_program',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                    to='wx.wmoprogram'),
        ),
        migrations.AddField(
            model_name='station',
            name='wmo_region',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                    to='wx.wmoregion'),
        ),
        migrations.AddField(
            model_name='station',
            name='wmo_station_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                    to='wx.wmostationtype'),
        ),
        migrations.CreateModel(
            name='RatingCurveTable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('h', models.FloatField()),
                ('q', models.FloatField()),
                (
                    'rating_curve',
                    models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx.ratingcurve')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='ratingcurve',
            name='station',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx.station'),
        ),
        migrations.CreateModel(
            name='PeriodicJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_running', models.BooleanField(default=False)),
                ('last_record', models.IntegerField(default=0)),
                ('periodic_job_type',
                 models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx.periodicjobtype')),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx.station')),
            ],
            options={
                'ordering': ('station', 'periodic_job_type'),
            },
        ),
        migrations.CreateModel(
            name='NoaaDcpsStation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('decoder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wx.decoder')),
                ('format', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wx.format')),
                ('interval', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wx.interval')),
                ('noaa_dcp', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wx.noaadcp')),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wx.station')),
            ],
            options={
                'verbose_name': 'NMS DCP Station',
                'verbose_name_plural': 'NMS DCP Stations',
            },
        ),
        migrations.AddField(
            model_name='noaadcp',
            name='first_channel_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='first_channels', to='wx.noaatransmissiontype'),
        ),
        migrations.AddField(
            model_name='noaadcp',
            name='second_channel_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='second_channels', to='wx.noaatransmissiontype'),
        ),
        migrations.AddField(
            model_name='measurementvariable',
            name='physical_quantity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx.physicalquantity'),
        ),
        migrations.CreateModel(
            name='HydroMLPredictionStation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data_period_in_minutes', models.IntegerField()),
                ('interval_in_minutes', models.IntegerField()),
                ('neighborhood',
                 models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx.neighborhood')),
                ('prediction',
                 models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx.hydromlprediction')),
                ('target_station', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx.station')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='hydromlprediction',
            name='variable',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx.variable'),
        ),
        migrations.CreateModel(
            name='HourlySummaryTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('datetime', models.DateTimeField()),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx.station')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('alias', models.CharField(max_length=256, null=True)),
                ('file', models.FileField(upload_to=wx.models.document_directory_path)),
                ('processed', models.BooleanField(default=False)),
                ('decoder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                              to='wx.decoder')),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wx.station')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataFileVariable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('datafile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wx.datafile')),
                ('variable', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wx.variable')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataFileStation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('datafile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wx.datafile')),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wx.station')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DailySummaryTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('date', models.DateField()),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx.station')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AdministrativeRegion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=45)),
                ('administrative_region_type',
                 models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx.administrativeregiontype')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx.country')),
            ],
            options={
                'verbose_name': 'administrative region',
                'verbose_name_plural': 'administrative regions',
            },
        ),
        migrations.CreateModel(
            name='StationVariable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('first_measurement', models.DateTimeField(blank=True, null=True)),
                ('last_measurement', models.DateTimeField(blank=True, null=True)),
                ('last_value', models.FloatField(blank=True, null=True)),
                ('height', models.FloatField(blank=True, null=True)),
                ('test_range_min', models.FloatField(blank=True, null=True)),
                ('test_range_max', models.FloatField(blank=True, null=True)),
                ('test_step_min', models.FloatField(blank=True, null=True)),
                ('test_step_max', models.FloatField(blank=True, null=True)),
                ('test_persistence_variance', models.FloatField(blank=True, null=True)),
                ('test_persistence_interval', models.FloatField(blank=True, null=True)),
                ('test_spike_value', models.FloatField(blank=True, null=True)),
                ('last_data_datetime', models.DateTimeField(blank=True, null=True)),
                ('last_data_value', models.FloatField(blank=True, null=True)),
                ('last_data_code', models.CharField(blank=True, max_length=60, null=True)),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx.station')),
                ('variable', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx.variable')),
            ],
            options={
                'ordering': ['station__id', 'variable__id'],
                'unique_together': {('station', 'variable')},
            },
        ),
        migrations.CreateModel(
            name='StationNeighborhood',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('neighborhood',
                 models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='neighborhood_stations',
                                   to='wx.neighborhood')),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx.station')),
            ],
            options={
                'unique_together': {('neighborhood', 'station')},
            },
        ),
        migrations.CreateModel(
            name='StationFileIngestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('remote_folder', models.CharField(max_length=1024)),
                ('file_pattern', models.CharField(max_length=256)),
                ('cron_schedule', models.CharField(default='15/15 * * * *', max_length=64)),
                ('utc_offset_minutes', models.IntegerField()),
                ('delete_from_server', models.BooleanField()),
                ('is_active', models.BooleanField(default=True)),
                ('is_binary_transfer', models.BooleanField(default=False)),
                ('is_historical_data', models.BooleanField(default=False)),
                ('override_data_on_conflict', models.BooleanField(default=False)),
                ('decoder', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx.decoder')),
                ('ftp_server', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx.ftpserver')),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx.station')),
            ],
            options={
                'unique_together': {('ftp_server', 'remote_folder', 'station')},
            },
        ),
        migrations.CreateModel(
            name='StationDataMinimumInterval',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('datetime', models.DateTimeField()),
                ('minimum_interval', models.TimeField(blank=True, null=True)),
                ('record_count', models.IntegerField()),
                ('ideal_record_count', models.IntegerField()),
                ('record_count_percentage', models.FloatField()),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx.station')),
                ('variable', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx.variable')),
            ],
            options={
                'unique_together': {('datetime', 'station', 'variable')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='station',
            unique_together={('data_source', 'code')},
        ),
        migrations.CreateModel(
            name='QcStepThreshold',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('interval', models.IntegerField(blank=True, null=True)),
                ('step_min', models.FloatField(blank=True, null=True)),
                ('step_max', models.FloatField(blank=True, null=True)),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx.station')),
                ('variable', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx.variable')),
            ],
            options={
                'ordering': ('station', 'variable', 'interval'),
                'unique_together': {('station', 'variable', 'interval')},
            },
        ),
        migrations.CreateModel(
            name='QcRangeThreshold',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('interval', models.IntegerField(blank=True, null=True)),
                ('range_min', models.FloatField(blank=True, null=True)),
                ('range_max', models.FloatField(blank=True, null=True)),
                ('month', models.IntegerField(default=1)),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx.station')),
                ('variable', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx.variable')),
            ],
            options={
                'ordering': ('station', 'variable', 'month', 'interval'),
                'unique_together': {('station', 'variable', 'month', 'interval')},
            },
        ),
        migrations.CreateModel(
            name='QcPersistThreshold',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('interval', models.IntegerField()),
                ('window', models.IntegerField()),
                ('minimum_variance', models.FloatField()),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx.station')),
                ('variable', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx.variable')),
            ],
            options={
                'ordering': ('station', 'variable', 'interval'),
                'unique_together': {('station', 'variable', 'interval')},
            },
        ),
        migrations.CreateModel(
            name='HydroMLPredictionMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('prediction_result', models.CharField(max_length=32)),
                ('hydroml_prediction',
                 models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx.hydromlprediction')),
                (
                    'quality_flag',
                    models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx.qualityflag')),
            ],
            options={
                'unique_together': {('hydroml_prediction', 'quality_flag')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='hydromlprediction',
            unique_together={('hydroml_prediction_id', 'variable')},
        ),
        migrations.CreateModel(
            name='DcpMessages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('datetime', models.DateTimeField()),
                ('failure_code', models.CharField(max_length=1)),
                ('signal_strength', models.CharField(max_length=2)),
                ('frequency_offset', models.CharField(max_length=2)),
                ('modulation_index', models.CharField(max_length=1)),
                ('data_quality', models.CharField(max_length=1)),
                ('channel', models.CharField(max_length=3)),
                ('spacecraft_indicator', models.CharField(max_length=1)),
                ('message_data_length', models.CharField(max_length=5)),
                ('payload', models.TextField()),
                ('data_source', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx.datasource')),
                ('noaa_dcp', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx.noaadcp')),
            ],
            options={
                'ordering': ('noaa_dcp', 'datetime'),
                'unique_together': {('noaa_dcp', 'datetime')},
            },
        ),
        migrations.RunSQL('''
            CREATE EXTENSION IF NOT EXISTS tablefunc;

            
            
            CREATE TABLE public.raw_data (
                station_id int4 NOT NULL,
                variable_id int4 NOT NULL,
                datetime timestamptz NOT NULL,
                measured float4 NOT NULL,
                qc_range_quality_flag int4 NULL,
                qc_range_description varchar(256) NULL,
                qc_step_quality_flag int4 NULL,
                qc_step_description varchar(256) NULL,
                qc_persist_quality_flag int4 NULL,
                qc_persist_description varchar(256) NULL,
                quality_flag int4 NULL,
                manual_flag int4 NULL,
                consisted float8 NULL,
                is_daily bool NOT NULL DEFAULT false,
                remarks varchar(150) NULL,
                observer varchar(150) NULL,
                code varchar(60) NULL,
                created_at timestamptz NULL,
                updated_at timestamptz NULL,
                ml_flag int4 NULL DEFAULT 1,
                CONSTRAINT raw_data_station_id_variable_id_datetime_key UNIQUE (station_id, variable_id, datetime)
            );
            ALTER TABLE public.raw_data OWNER TO dba;
            
            ALTER TABLE ONLY public.raw_data
                ADD CONSTRAINT raw_data_station_id_fkey FOREIGN KEY (station_id) REFERENCES public.wx_station(id);
            
            ALTER TABLE ONLY public.raw_data
                ADD CONSTRAINT raw_data_variable_id_fkey FOREIGN KEY (variable_id) REFERENCES public.wx_variable(id);
            
            ALTER TABLE ONLY public.raw_data
                ADD CONSTRAINT raw_data_qc_range_quality_flag_fkey FOREIGN KEY (qc_range_quality_flag) REFERENCES public.wx_qualityflag(id);
            
            ALTER TABLE ONLY public.raw_data
                ADD CONSTRAINT raw_data_qc_step_quality_flag_fkey FOREIGN KEY (qc_step_quality_flag) REFERENCES public.wx_qualityflag(id);
            
            ALTER TABLE ONLY public.raw_data
                ADD CONSTRAINT raw_data_qc_persist_quality_fkey FOREIGN KEY (qc_persist_quality_flag) REFERENCES public.wx_qualityflag(id);
            
            ALTER TABLE ONLY public.raw_data
                ADD CONSTRAINT raw_data_quality_flag_fkey FOREIGN KEY (quality_flag) REFERENCES public.wx_qualityflag(id);
            
            ALTER TABLE ONLY public.raw_data
                ADD CONSTRAINT raw_data_manual_flag_fkey FOREIGN KEY (manual_flag) REFERENCES public.wx_qualityflag(id);
            
            SELECT create_hypertable('raw_data', 'datetime');
            
            
            
            CREATE TABLE public.hourly_summary (
                datetime timestamptz NULL,
                station_id int4 NULL,
                variable_id int4 NULL,
                min_value float4 NULL,
                max_value float4 NULL,
                avg_value float4 NULL,
                sum_value float4 NULL,
                num_records int4 NULL,
                created_at timestamptz NULL,
                updated_at timestamptz NULL,
                CONSTRAINT hourly_summary_uniq UNIQUE (datetime, station_id, variable_id)
            );
            ALTER TABLE public.hourly_summary OWNER TO dba;
            
            
            
            CREATE TABLE public.daily_summary (
                "day" date NULL,
                station_id int4 NULL,
                variable_id int4 NULL,
                min_value float4 NULL,
                max_value float4 NULL,
                avg_value float4 NULL,
                sum_value float4 NULL,
                num_records int4 NULL,
                created_at timestamptz NULL,
                updated_at timestamptz NULL,
                CONSTRAINT daily_summary_uniq UNIQUE (day, station_id, variable_id)
            );
            ALTER TABLE public.daily_summary OWNER TO dba;
            
            
            
            CREATE TABLE public.last24h_summary (
                datetime timestamptz NULL,
                station_id int4 NULL,
                variable_id int4 NULL,
                min_value float4 NULL,
                max_value float4 NULL,
                avg_value float4 NULL,
                sum_value float4 NULL,
                latest_value float4 NULL,
                num_records int4 NULL,
                CONSTRAINT last24h_summary_uniq UNIQUE (station_id, variable_id)
            );
            ALTER TABLE public.last24h_summary OWNER TO dba;
            
            
            
            CREATE OR REPLACE VIEW public.monthly_summary
            AS  (SELECT extract('year' from day) AS year,
                        extract('month' from day) AS month,
                        date_trunc('month', day)::timestamp AS date,
                        station_id,
                        variable_id,
                        min(min_value) AS min_value,
                        max(max_value) AS max_value,
                        sum(sum_value) / sum(num_records) AS avg_value,
                        sum(sum_value) AS sum_value,
                        sum(num_records) AS num_records
                FROM public.daily_summary
                GROUP BY 1, 2, 3, 4, 5);
            
            
            
            CREATE OR REPLACE VIEW public.yearly_summary
            AS  (SELECT extract('year' from day) AS year,
                        date_trunc('year', day)::timestamp AS date,
                        station_id,
                        variable_id,
                        min(min_value) AS min_value,
                        max(max_value) AS max_value,
                        sum(sum_value) / sum(num_records) AS avg_value,
                        sum(sum_value) AS sum_value,
                        sum(num_records) AS num_records
                FROM public.daily_summary
                GROUP BY 1, 2, 3, 4);
        '''),
    ]
